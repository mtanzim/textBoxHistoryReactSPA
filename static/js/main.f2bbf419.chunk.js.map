{"version":3,"sources":["components/Header.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlechangeText","event","console","log","target","value","setState","textData","toggleHistory","showHistory","state","handleSaveText","stateHistory","unshift","timestamp","Date","mockAsync","Promise","resolve","reject","setTimeout","randNum","Math","random","toString","replace","status","data","fetchData","link","method","concat","then","res","localStorage","setItem","REACT_STATE_STORAGE","catch","err","error","type","id","onChange","onClick","map","item","index","key","Component","App","components_Header","components_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2bbf419.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n  <div className=\"jumbotron\">\r\n    <h1>Text Input History</h1>\r\n    <p>Type in the input box</p>\r\n    <p>Click save to save the input into the history</p>\r\n    <p>Toggle History to see everything you've typed in</p>\r\n  </div>\r\n  )\r\n}\r\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\n// import Card from './Card';\n// import axios from 'axios';\n// import Header from './Header';\n// import AppRouter from './AppRouter';\n\n\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.REACT_STATE_STORAGE = 'reactState';\n    this.state = {textData:'', showHistory: false};\n    this.stateHistory = [];\n\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n/*   componentWillUpdate () {\n    // note: local storage only stores data\n    console.log(localStorage.getItem(this.REACT_STATE_STORAGE));\n  } */\n\n  handlechangeText = (event) => {\n    console.log(event.target.value);\n    this.setState({\n      textData: event.target.value\n    });\n  }\n\n  toggleHistory = () => {\n    this.setState ({\n      showHistory: !this.state.showHistory\n    })\n  }\n\n  handleSaveText = () => {\n    this.stateHistory.unshift({\n      timestamp: + new Date(),\n      textData:this.state.textData\n    })\n    console.log(this.stateHistory);\n    this.setState({\n      textData: ''\n    });\n  }\n\n  mockAsync = () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let randNum = Math.random().toString(36).replace('0.', '');\n        resolve({ status: 'OK', data: randNum});\n      }, 200);\n    })\n  }\n\n  fetchData = (link, method) => {\n    return () => {\n      console.log(`clicked ${link} with ${method}`);\n/*       return axios({\n        method: method,\n        url: link,\n        responseType: 'json'\n      }) */\n      this.mockAsync()\n      .then (res => {\n        console.log(res);\n        this.setState({data:res.data});\n        localStorage.setItem(this.REACT_STATE_STORAGE, res.data);\n      })\n      .catch(err => console.error(err));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"\">\n      <div className='row'>\n        <div className=\"col-7\">\n          <input type=\"text\" id='inputText' value={this.state.textData} onChange={this.handlechangeText}></input>\n        </div>\n        <div className=\"col-5\">\n          <button id='saveButton' className='btn btn-primary ml-2 mt-2' onClick={this.handleSaveText}>Save</button>\n          <button id='saveButton' className='btn btn-danger ml-2 mt-2' onClick={this.toggleHistory}>Toggle History</button>\n        </div>\n      </div>\n      {this.state.showHistory && (\n      <div>\n      <div className='row'><h4>History</h4></div>\n      <div className='row'>\n        <div className='col-12'>\n          <ul>\n          {this.stateHistory.map((item, index) => \n            <li key={index} id={index}>{item.textData}</li>\n          )}\n          </ul>\n        </div>\n      </div>\n      </div>\n      )}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport Home from './Home';\r\n// import AppRouter from './AppRouter';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App container\">\r\n        <Header/>\r\n        <Home/>\r\n        {/* <AppRouter/> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PageA from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<PageA />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}